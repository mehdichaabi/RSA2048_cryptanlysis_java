
package rsa_attaq;
/**
 *
 * @author Dell
 */
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class attack {
    public String decrypt(BigInteger message,BigInteger d,BigInteger n) {
        //return new String((new BigInteger(message)).modPow(d, n).toByteArray());
        //return message.modPow(d, n).toString();
        return new String(message.modPow(d, n).toByteArray());
    }
    
        List<BigInteger> q = new ArrayList<BigInteger>();
	List<Fraction> r = new ArrayList<Fraction>();
	List<BigInteger> n = new ArrayList<BigInteger>();
	List<BigInteger> d = new ArrayList<BigInteger>();   
        BigInteger e= new BigInteger("14274587226893404013509076551000389068796554973304448436086797402302027837003262127649501635802863531962207484649058593985330801185438907139473885890836121118507661521821259307324404656948732553691528336959004908399820560702007346107021170560127713677944722516254693569152847374869688616259800907385152658679341561011142465004412290257916111860494421925503766834674656279129018111154329762745312586750057827561599172168790424071813634497881043419404335664745000569557338452768128803838411089127686248504121563937007799435653015475436331396074899531611837905599539281079329812972466478723999213304856536164366966505891");
        BigInteger N=new BigInteger("26097671695808496244855154470989041916111880849148817271412591072244123230765772594098538808548577872277355348117467843046441132695952774759164271854739690409910863556006947342251145139443584610429103572011994941485807069637779740701247410013683357523969507313153350494603524198852341982523478559454423190058386311275204403547433869140554771473029936210606855701395664999161350064139620151252955083525950417994105058871815116607642261901193088729871629962627468679310325040100139840410970019478681155001324491440098912066904089340611682843840365157417090223605015164060963216103270949393052452592152805304697590445381");
        BigInteger C=new BigInteger("14416795327113130659958099397828380073307351108403177832058464227333425658505980469276491157920925545686954965419583355597677508738298728770714707294403880205164164476106326450969653578153595718414286648493963590676504977013021227654004412921360382532559192821883370966337824744600457810093264540590571643011694116516765704934909932394621959225633454269899918425161430441623772989939935038460133848325982521709092864179714779510310518112795758480444280130131770537009791368316896282776974760164342189305878532927482067446627056442192085325101870840465971498936665491868700126063265082934543022606992345619297671751847");
        Fraction kDdg = new Fraction(BigInteger.ZERO, BigInteger.ONE); 
        
        public BigInteger attack1(){
		int i= 0;
		BigInteger temp1;
		
		while((temp1 = step(i)) == null){
			i++;
		}
		
		return temp1;
	}
        public BigInteger step(int iteration){
		if(iteration == 0){
			//initialization for iteration 0
			Fraction ini = new Fraction(e,N);
			q.add(ini.floor());
			r.add(ini.remainder());
			n.add(q.get(0));
			d.add(BigInteger.ONE);		
		}
		else if (iteration == 1){
			//iteration 1
			Fraction temp2 = new Fraction(r.get(0).denominator, r.get(0).numerator);
			q.add(temp2.floor());
			r.add(temp2.remainder());
			n.add((q.get(0).multiply(q.get(1))).add(BigInteger.ONE));
			d.add(q.get(1));
		}
		else{
			if(r.get(iteration-1).numerator.equals(BigInteger.ZERO)){
				return BigInteger.ONE.negate();
			}
			Fraction temp3 = new Fraction(r.get(iteration-1).denominator, r.get(iteration-1).numerator);
			q.add(temp3.floor());
			r.add(temp3.remainder());
			n.add((q.get(iteration).multiply(n.get(iteration-1)).add(n.get(iteration-2))));
			d.add((q.get(iteration).multiply(d.get(iteration-1)).add(d.get(iteration-2))));
		}
		
		
		if(iteration % 2 == 0){
			if(iteration == 0){
				kDdg = new Fraction(q.get(0).add(BigInteger.ONE), BigInteger.ONE);
			}
			else{
				kDdg = new Fraction((q.get(iteration).add(BigInteger.ONE)).multiply(n.get(iteration-1)).add(n.get(iteration-2)), (q.get(iteration).add(BigInteger.ONE)).multiply(d.get(iteration-1)).add(d.get(iteration-2)));
			}
		}
		
		else{
			kDdg = new Fraction(n.get(iteration), d.get(iteration));
		}
		
		
		BigInteger edg = this.e.multiply(kDdg.denominator); 
		
	
		BigInteger fy = (new Fraction(this.e, kDdg)).floor(); 
		BigInteger g = edg.mod(kDdg.numerator);
		
	
		BigDecimal pAqD2 = (new BigDecimal(this.N.subtract(fy))).add(BigDecimal.ONE).divide(new BigDecimal("2"));
		if(!pAqD2.remainder(BigDecimal.ONE).equals(BigDecimal.ZERO))
			return null;
		
		
		BigInteger pMqD2s = pAqD2.toBigInteger().pow(2).subtract(N);
		BigInteger pMqD2 = sqrt(pMqD2s);
		if(!pMqD2.pow(2).equals(pMqD2s))
			return null;
		
		
		BigInteger privateKey = edg.divide(e.multiply(g));
		return privateKey;
		
	}
	
	
	public static BigInteger sqrt(BigInteger paramBigInteger){
	    BigInteger localBigInteger1 = BigInteger.valueOf(0L);
	    BigInteger localBigInteger2 = localBigInteger1.setBit(2 * paramBigInteger.bitLength());
	    do
	    {
	      BigInteger localBigInteger3 = localBigInteger1.add(localBigInteger2);
	      if (localBigInteger3.compareTo(paramBigInteger) != 1) {
	        paramBigInteger = paramBigInteger.subtract(localBigInteger3);
	        localBigInteger1 = localBigInteger3.add(localBigInteger2);
	      }
	      localBigInteger1 = localBigInteger1.shiftRight(1);
	      localBigInteger2 = localBigInteger2.shiftRight(2);
	    }while (localBigInteger2.bitCount() != 0);
	    return localBigInteger1;
	}

public  static String decod(BigInteger m){
				
				// ou  String [][]={{"a","b","c","d","e","f",},{"01","02","","",}};
				String s=" abcdefghijklmnopqrstuvwxyz -!,'",result="";
				char[] mS=m.toString().toCharArray();
				for(int j=0,k; j<mS.length; j+=2){
						k=Integer.parseInt(mS[j]+""+mS[j+1]);	
						if(k>32) {k=Integer.parseInt(mS[0]+"");j=-1; result="";}//si il commence par 1=> 01
						result+=s.charAt(k);
					}	
				
				return result;
			}	

public static void main(String[] args){
    BigInteger C=new BigInteger("14416795327113130659958099397828380073307351108403177832058464227333425658505980469276491157920925545686954965419583355597677508738298728770714707294403880205164164476106326450969653578153595718414286648493963590676504977013021227654004412921360382532559192821883370966337824744600457810093264540590571643011694116516765704934909932394621959225633454269899918425161430441623772989939935038460133848325982521709092864179714779510310518112795758480444280130131770537009791368316896282776974760164342189305878532927482067446627056442192085325101870840465971498936665491868700126063265082934543022606992345619297671751847");
    BigInteger N=new BigInteger("26097671695808496244855154470989041916111880849148817271412591072244123230765772594098538808548577872277355348117467843046441132695952774759164271854739690409910863556006947342251145139443584610429103572011994941485807069637779740701247410013683357523969507313153350494603524198852341982523478559454423190058386311275204403547433869140554771473029936210606855701395664999161350064139620151252955083525950417994105058871815116607642261901193088729871629962627468679310325040100139840410970019478681155001324491440098912066904089340611682843840365157417090223605015164060963216103270949393052452592152805304697590445381");
    BigInteger C1=new BigInteger("12023029608204264188325344479861615670151035969342214888847043035687351345584196210560506695107829847803976958657782971235470452244225312848022478709766441018561511224849779795633045721722295735648621088889192904343713903863620066112500934315837332429358649510675795410907957967956650123464093393452991351666185404185013696436662499214301996331492723985395098817293587533671115068829680526905747363913417222863708563136901975156446498758976305302769957342688392525734179479609587319653357405855054738128660122555271396948010870911267186017524668171378245014294611209993597490570283964016775924577112932771756831750695");    
    BigInteger C2=new BigInteger("98076901917924437886483916811610442217369147846024064778315864684993331766522507859756636422812995855205302238060744759023485220820335759744790271367768058612642050260912822048170050747339656436301259664582883456243512307790943058572762919382466681815525737374690657808807379532028472044854741177378240953562896864820463205248992551730326651318067218110062100299119612601497242596516495731764745092531591091537432733980180567349251349525633159389842872647606063130686779632165975738091793655578147129036571637214875240815125152752298913761675131402285884755786191246688265920299876953070802330750201810100544079898");
    //C1.shiftLeft(10);
    attack a=new attack();
    BigInteger d = a.attack1();
    System.out.println(d);
    String m=a.decrypt(C1,d ,N );
    String m2=a.decrypt(C2,d ,N );
    //System.out.println(decod(new BigInteger(m)));
    System.out.println(m);
    System.out.println(m2);
    
  }    
}

